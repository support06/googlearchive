<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Creating Whack-A-Mole(ker) Using GMarker.setImage</title>
<link href="http://www.google.com/apis/maps/base.css" rel="stylesheet" 
type="text/css"/>
</head>
<body>
<h3>Creating Whack-A-Mole(ker) Using GMarker.setImage()</h3>

<p>
In <code>load</code>, I set up the map and call <code>createMarker</code> for each of the points in the <code>moleLocations</code> array, adding each of the returned markers to a global <code>markers</code> array.
</p>
<p>
In <code>createMarker</code>, I create a marker with the global <code>GIcon iconMole</code> which has the default <code>'mole_down.png'</code> image for its <code>image</code> property. <br/>
<strong>Note:</strong> I created all the mole images with the same canvas size (36*42px), as calling <code>setImage</code> on <code>GMarker</code> will not resize the <code>GIcon</code>. The new image will just be resized to fit the original <code>GIcon.iconSize</code>.
</p>
<p>
Still in <code>createMarker</code>, I extend <code>Marker</code> with a <code>whackState</code> property so I can keep track of the state of a mole hole. 
I also add <code>click</code>, <code>mouseover</code>, and <code>mouseout</code> listeners to the marker. In the <code>click </code> listener, I check if the game is being played and if the current marker is in the up <code>whackState</code>. If so, I increment the global <code>currentScore</code>, call <code>marker.setImage('mole_down.png')</code>, and change the <code>whackState</code> to <code>almostDown</code>. In the <code>mouseover</code> and <code>mouseout</code> listeners, I toggle between <code>'mole_scared.png'</code> and <code>'mole_up.png'</code> if the mole is currently in the up <code>whackState</code>. Fast clickers will barely notice the <code>mouseover</code> state, but it's always nice to have a <code>mouseover</code> state to provide additional feedback to the player. 
</p>
<p>
When the player clicks the start button, I iterate through the <code>markers</code> array, calling <code>marker.setImage('mole_down.png')</code> and setting <code>whackState</code> to <code>'down'</code>. I also reset the game seconds left and current score, and call <code>setInterval(popMoles, 1000)</code> so that the <code>popMoles</code> function will get called every second.
</p>
<p>
In <code>popMoles</code>, I iterate through the <code>markers</code> array and pick a random number between 1 and 3 for each. If the marker is in the down <code>whackState</code> and the random number picked is 1, I pop the mole up by calling <code>marker.setImage('mole_up.png')</code> and setting its <code>whackState</code> to up. If the marker is in the almostDown <code>whackState</code>, I set its <code>whackState</code> to down. This intermediary state ensures that markers won't pop up immediately after getting whacked down. I then increment the game seconds and update the score. If the game seconds played equals the game duration (30), I call <code>endGame</code>.
</p>
<p>
In <code>endGame</code>, I iterate through the <code>markers</code> array, calling <code>marker.setImage('mole_happy.png')</code> for every marker currently in the up <code>whackState</code>. I also clear the timer that was calling <code>popMoles</code> every second.
</p>
<p><a href="whackamarker.htm">View example (whackamarker.htm)</a>. 

</body>
</html>



