<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
  <title>Google Spreadsheets -> Map Wizard</title>

  <style type="text/css">
  body {
    font-family: Arial, sans-serif;
    font-size: 13px;
  }
  .cm_infoWindowTitle {
    font-weight:bold;
  }
  #cm_sidebarDIV {
    overflow:auto;
  }
  #cm_sidebarDIV a {
   color: #000000;
  }
  #cm_mapTABLE { 
    border: 1px solid black;
  }
  #cm_map {
    width: 550px;
    height: 450px;
  }
  </style>

  </head>
<body>

<div>

<table id="cm_mapTABLE">
  <tbody> 
    <tr id="cm_mapTR">
      <td>
        <div id="cm_map"></div>
      </td>
   </tr>
  </tbody>
</table>
</div>

<script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAjU0EJWnWPMv7oQ-jjS7dYxSPW5CJgpdgO_s4yyMovOaVh_KvvhSfpvagV18eOyDWu7VytS6Bi1CWxw" 
  type="text/javascript"></script>

<script type="text/javascript">
//<![CDATA[

var cm_map;
var cm_mapMarkers = [];
var cm_mapHTMLS = [];

// Create a base icon for all of our markers that specifies the
// shadow, icon dimensions, etc.
var cm_baseIcon = new GIcon();
cm_baseIcon.shadow = "http://www.google.com/mapfiles/shadow50.png";
cm_baseIcon.iconSize = new GSize(20, 34);
cm_baseIcon.shadowSize = new GSize(37, 34);
cm_baseIcon.iconAnchor = new GPoint(9, 34);
cm_baseIcon.infoWindowAnchor = new GPoint(9, 2);
cm_baseIcon.infoShadowAnchor = new GPoint(18, 25);

// Change these parameters to customize map
var param_wsId = "";
var param_ssKey = "";
var param_useSidebar = "";
var param_useDescription = "";
var param_imageColumn = "";
var param_titleColumn = "";
var param_descriptionColumn = "";
var param_latColumn = "";
var param_lngColumn = "";
var param_rankColumn = "";
var param_mapWidth;
var param_mapHeight;
var param_iconType = "";
var param_iconOverType = "";

/**
* Utility function to extract parameters appended to URL.
* @param {String} name Name of parameter in URL
* @return {String} Value of parameter, or "" if not found
*/
function getURLParam(name) {
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(window.location.href);
  return (results === null ? "" : results[1]);
}

/**
 * Populates global variables from URL query string.
 */
function populateVars() {
  param_wsId = getURLParam("wsId");
  param_ssKey = getURLParam("ssKey");
  param_useSidebar = getURLParam("useSidebar");
  param_titleColumn = getURLParam("titleColumn");
  param_descriptionColumn = getURLParam("descriptionColumn");
  param_latColumn = getURLParam("latColumn");
  param_lngColumn = getURLParam("lngColumn");
  param_rankColumn = getURLParam("rankColumn");
  param_mapWidth = getURLParam("mapWidth");
  param_mapHeight = getURLParam("mapHeight");
  param_iconType = getURLParam("iconType");
  param_iconOverType = getURLParam("iconOverType");

}

/**
 * Loads map and calls function to load in worksheet data.
 */
function cm_load() {
  populateVars();
  document.getElementById("cm_map").style.width = param_mapWidth + "px";
  document.getElementById("cm_map").style.height = param_mapHeight + "px";

  if (GBrowserIsCompatible()) {
    // create the map
    cm_map = new GMap2(document.getElementById("cm_map"));
    cm_map.addControl(new GSmallMapControl());
    cm_map.addControl(new GMapTypeControl());
    cm_map.setCenter(new GLatLng(43.907787,-79.359741), 2);
    cm_getJSON();
  } else {
    alert("Sorry, the Google Maps API is not compatible with this browser");
  } 
}

/**
 * Function called when marker on the map is clicked.
 * Opens an info window (bubble) above the marker.
 * @param {Number} markerNum Number of marker in global array
 */
function cm_markerClicked(markerNum) {
  var marker = cm_mapMarkers[markerNum];
  marker.openInfoWindowHtml(cm_mapHTMLS[markerNum]);
}

/**
 * Function that sorts 2 worksheet rows from JSON feed
 * based on their rank column. Only called if column is defined.
 * @param {rowA} Object Represents row in JSON feed
 * @param {rowB} Object Represents row in JSON feed
 * @return {Number} Difference between row values
 */
function cm_sortRows(rowA, rowB) {
  var rowAValue = parseFloat(rowA["gsx$" + param_rankColumn].$t);
  var rowBValue = parseFloat(rowB["gsx$" + param_rankColumn].$t);

  return rowAValue - rowBValue;
}

/** 
 * Called when JSON is loaded. 
 * Creates sidebar if param_sideBar is true.
 * Sorts rows if param_rankColumn is valid column.
 * Iterates through worksheet rows, creating marker
 * and sidebar entries for each row.
 * @param {JSON} json Worksheet feed
 */       
function cm_loadMapJSON(json) {
   var usingRank = false;

  if(param_useSidebar == "true") {
    var sidebarTD = document.createElement("td");
    sidebarTD.setAttribute("width","125");
    sidebarTD.setAttribute("valign","top");

    var sidebarDIV = document.createElement("div");
    sidebarDIV.id = "cm_sidebarDIV";
    sidebarDIV.style.color = "#000000";
    sidebarDIV.style.height = param_mapHeight + "px";
    sidebarDIV.style.overflow = "auto";
    sidebarTD.appendChild(sidebarDIV);
    document.getElementById("cm_mapTR").appendChild(sidebarTD);
  }

  var bounds = new GLatLngBounds();	  

  if(json.feed.entry[0] && json.feed.entry[0]["gsx$" + param_rankColumn]) {
    usingRank = true;
    json.feed.entry.sort(cm_sortRows);
  }

  for (var i = 0; i < json.feed.entry.length; i++) {
    var entry = json.feed.entry[i];

    if(entry["gsx$" + param_latColumn]) {
      var lat = parseFloat(entry["gsx$" + param_latColumn].$t);
      var lng = parseFloat(entry["gsx$" + param_lngColumn].$t);
      var point = new GLatLng(lat,lng);

      var html = "<div class='cm_infoWindow'>";
      html += "<span class='cm_infoWindowTitle'>" +
          entry["gsx$"+param_titleColumn].$t + "</span>";

      var label = entry["gsx$"+param_titleColumn].$t;
      var rank = "";

      if( usingRank && entry["gsx$" + param_rankColumn]) {
        rank = parseInt(entry["gsx$" + param_rankColumn].$t);
      }

      if( entry["gsx$" + param_descriptionColumn]) {
        html += "<br/>" + entry["gsx$" + param_descriptionColumn].$t;
      }

      html += "</div>";

      // create the marker
      var marker = cm_createMarker(point,label,html,rank);
      cm_map.addOverlay(marker);
      cm_mapMarkers.push(marker);
      cm_mapHTMLS.push(html);
      bounds.extend(point);
	  
      if(param_useSidebar == "true") {
        var markerA = document.createElement("a");
        markerA.setAttribute("href","javascript:cm_markerClicked('" + i +"')");
        var sidebarText= "";
        if(usingRank) {
          sidebarText += rank + ") ";
        } 
        sidebarText += label;
        markerA.appendChild(document.createTextNode(sidebarText));
        sidebarDIV.appendChild(markerA);
        sidebarDIV.appendChild(document.createElement("br"));
        sidebarDIV.appendChild(document.createElement("br"));
      } 
    }
  }

  cm_map.setZoom(cm_map.getBoundsZoomLevel(bounds));
  cm_map.setCenter(bounds.getCenter());
}

/**
 * Creates marker with ranked Icon or blank icon,
 * depending if rank is defined. Assigns onclick function.
 * @param {GLatLng} point Point to create marker at
 * @param {String} title Tooltip title to display for marker
 * @param {String} html HTML to display in InfoWindow
 * @param {Number} rank Number rank of marker, used in creating icon
 * @return {GMarker} Marker created
 */
function cm_createMarker(point, title, html, rank) {
  var markerOpts = {};

  var nIcon = new GIcon(cm_baseIcon);

  if(rank > 0 && rank < 100){
    nIcon.imageOut = "http://googlemaps.github.io/js-v2-samples/" +
        "markers/" + param_iconType + "/marker" + rank + ".png";
    nIcon.imageOver = "http://googlemaps.github.io/js-v2-samples/" +
        "markers/" + param_iconOverType + "/marker" + rank + ".png";
    nIcon.image = nIcon.imageOut; 
  } else { 
    nIcon.imageOut = "http://googlemaps.github.io/js-v2-samples/" +
        "markers/" + param_iconType + "/blank.png";
    nIcon.imageOver = "http://googlemaps.github.io/js-v2-samples/" +
        "markers/" + param_iconOverType + "/blank.png";
    nIcon.image = nIcon.imageOut;
  }

  markerOpts.icon = nIcon;
  markerOpts.title = title;
  var marker = new GMarker(point, markerOpts);

  GEvent.addListener(marker, "click", function() {
    marker.openInfoWindowHtml(html);
  });
  GEvent.addListener(marker, "mouseover", function() {
    marker.setImage(marker.getIcon().imageOver);
  });
  GEvent.addListener(marker, "mouseout", function() {
    marker.setImage(marker.getIcon().imageOut);
  });
  GEvent.addListener(marker, "infowindowopen", function() {
    marker.setImage(marker.getIcon().imageOver);
  });
  GEvent.addListener(marker, "infowindowclose", function() {
    marker.setImage(marker.getIcon().imageOut);
  });

  return marker;
}


function cm_getJSON() {

  // Retrieve the JSON feed.
  var script = document.createElement('script');

  script.setAttribute('src', 'http://spreadsheets.google.com/feeds/list'
                         + '/' + param_ssKey + '/' + param_wsId + '/public/values' +
                        '?alt=json-in-script&callback=cm_loadMapJSON');
  script.setAttribute('id', 'jsonScript');
  script.setAttribute('type', 'text/javascript');
  document.documentElement.firstChild.appendChild(script);
}

cm_load();

//]]>
</script>

  </body>

</html>






